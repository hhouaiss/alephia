---
import Icon from '../shared/Icon.astro';

const links = [
  { text: 'Accueil', href: '/' },
  //{ text: 'Services', href: '/#use-cases' },
  { text: 'Solutions', href: '/services/implementation-ia' },
  { text: 'À propos', href: '/about' },
  { text: 'Blog', href: '/blog' },
];
---

<header class="fixed w-full bg-white/95 backdrop-blur-sm border-b border-gray-100 z-50">
  <div class="container mx-auto px-4">
    <nav class="flex items-center justify-between h-20">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2">
        <img src="/images/alephia-colored-logo.svg" alt="Alefia" class="h-7 w-auto hover:opacity-90 transition-opacity">
      </a>

      <!-- Menu principal -->
      <div class="hidden md:flex items-center space-x-8">
        {links.map(link => (
          <a 
            href={link.href}
            class="text-gray-700 hover:text-primary font-medium transition-colors relative after:absolute after:bottom-0 after:left-0 after:w-0 after:h-0.5 after:bg-primary after:transition-all hover:after:w-full"
          >
            {link.text}
          </a>
        ))}
      </div>

      <!-- CTA Button -->
      <div class="flex items-center space-x-4">
        <button
          type="button"
          onclick="openModal()"
          class="hidden md:inline-flex bg-primary hover:bg-primary-dark text-white px-6 py-2.5 rounded-lg font-medium transition-all duration-200 hover:shadow-lg hover:scale-105"
        >
          Démarrer un projet
        </button>
        
        <!-- Menu mobile -->
        <button 
          id="mobile-menu-button" 
          class="md:hidden text-gray-700 hover:text-primary p-2 rounded-lg hover:bg-gray-50 transition-colors"
          aria-label="Menu"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
          </svg>
        </button>
      </div>
    </nav>
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden md:hidden border-t border-gray-100">
    <div class="container mx-auto px-4 py-4 space-y-2 bg-white">
      {links.map(link => (
        <a 
          href={link.href}
          class="block px-4 py-2 text-gray-700 hover:text-primary hover:bg-gray-50 rounded-lg transition-colors"
        >
          {link.text}
        </a>
      ))}
      <div class="pt-2 mt-2 border-t border-gray-100">
        <button
          type="button"
          onclick="openModal()"
          class="block w-full px-4 py-2 text-center bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors"
        >
          Démarrer un projet
        </button>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', (e) => {
        e.stopPropagation();
        mobileMenu.classList.toggle('hidden');
        
        // Change button icon when menu is open
        const isOpen = !mobileMenu.classList.contains('hidden');
        mobileMenuButton.innerHTML = isOpen 
          ? '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>'
          : '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" /></svg>';
      });

      // Close mobile menu when clicking a link
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" /></svg>';
        });
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!mobileMenu.contains(event.target) && !mobileMenuButton.contains(event.target)) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" /></svg>';
        }
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle both pure hash links and root-relative hash links
    document.querySelectorAll('a[href^="#"], a[href^="/#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        const href = this.getAttribute('href');
        
        // If we're already on the homepage and the link is a root-relative hash
        if (href.startsWith('/#') && window.location.pathname === '/') {
          e.preventDefault();
          const targetId = href.substring(1); // Remove the leading slash
          const targetElement = document.querySelector(targetId);
          
          if (targetElement) {
            scrollToElement(targetElement);
          }
        } 
        // If it's a pure hash link
        else if (href.startsWith('#')) {
          e.preventDefault();
          const targetElement = document.querySelector(href);
          
          if (targetElement) {
            scrollToElement(targetElement);
          }
        }
        // Otherwise, let the browser handle the navigation normally
      });
    });
    
    // Helper function for smooth scrolling
    function scrollToElement(element) {
      const headerOffset = 80;
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

      // Smooth scroll animation
      const startPosition = window.pageYOffset;
      const distance = offsetPosition - startPosition;
      const duration = 1000; // Increased duration for smoother effect
      let start = null;

      function animation(currentTime) {
        if (start === null) start = currentTime;
        const timeElapsed = currentTime - start;
        const progress = Math.min(timeElapsed / duration, 1);
        
        // Easing function for smoother animation
        const ease = t => t < 0.5 
          ? 4 * t * t * t 
          : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;

        window.scrollTo(0, startPosition + (distance * ease(progress)));

        if (timeElapsed < duration) {
          requestAnimationFrame(animation);
        }
      }

      requestAnimationFrame(animation);
      
      // Close mobile menu if open
      const mobileMenu = document.getElementById('mobile-menu');
      if (mobileMenu) {
        mobileMenu.classList.add('hidden');
      }
    }
  });
</script>